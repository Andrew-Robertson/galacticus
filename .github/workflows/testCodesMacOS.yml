name: Test-Codes-MacOS
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    paths:
      - 'Makefile'
      - 'source/**'
      - 'source/Bivar/**'
      - 'source/ISO_Varying_String/**'
      - 'source/gslODEInitVal2/**'
      - 'source/NSWC/**'
      - 'source/pFq/**'
      - 'source/gslSpecFuncApprox/**'
      - 'source/FFTlog/**'
      - 'perl/**'
      - 'perl/File/**'
      - 'perl/Galacticus/**'
      - 'perl/Galacticus/Launch/**'
      - 'perl/Galacticus/Constraints/**'
      - 'perl/Galacticus/Build/**'
      - 'perl/Galacticus/Build/Components/**'
      - 'perl/Galacticus/Build/Components/Classes/**'
      - 'perl/Galacticus/Build/Components/Implementations/**'
      - 'perl/Galacticus/Build/Components/Properties/**'
      - 'perl/Galacticus/Build/Components/TreeNodes/**'
      - 'perl/Galacticus/Build/Components/Hierarchy/**'
      - 'perl/Galacticus/Build/SourceTree/**'
      - 'perl/Galacticus/Build/SourceTree/Parse/**'
      - 'perl/Galacticus/Build/SourceTree/Analyze/**'
      - 'perl/Galacticus/Build/SourceTree/Process/**'
      - 'perl/Galacticus/Build/SourceTree/Process/FunctionClass/**'
      - 'perl/List/**'
      - 'perl/Sort/**'
      - 'perl/LaTeX/**'
      - 'perl/IO/**'
      - 'perl/IO/Compress/**'
      - 'perl/System/**'
      - 'perl/Fortran/**'
      - 'scripts/build/**'
      - 'schema/**'
concurrency:
  group: test-codes-MacOS-${{ github.ref }}
  cancel-in-progress: true
jobs:
  Build-Executables:
    runs-on: macos-11
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS=\"$GALACTICUS_FCFLAGS -fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib\"" >> $GITHUB_ENV
          echo "PATH=$PATH:/opt/local/bin:/usr/local/bin" >> $GITHUB_ENV
          echo "PERL_MM_USE_DEFAULT=1" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV
      - name: Install MacPorts
        run: |
          curl -L https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg --output MacPorts-2.7.1-11-BigSur.pkg
          sudo installer -pkg ./MacPorts-2.7.1-11-BigSur.pkg -target /
          rm ./MacPorts-2.7.1-11-BigSur.pkg
      - name: Install guile
        run: sudo port install guile18
      - name: Install libmatheval
        run: sudo port install libmatheval
      - name: Install qhull
        run: |
          curl -L http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz --output qhull-2020-src-8.0.2.tgz
          tar xvfz qhull-2020-src-8.0.2.tgz
          cd qhull-2020.2
          make -j3 CC=gcc-11 CXX=g++-11
          sudo make install
          cd ..
          rm -rf qhull-2020-src-8.0.2.tgz qhull-2020.2
      - name: Install GSL
        run: |
          curl -L ftp://ftp.gnu.org/gnu/gsl/gsl-2.6.tar.gz --output gsl-2.6.tar.gz
          tar xvfz gsl-2.6.tar.gz
          cd gsl-2.6
          CC=gcc-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf gsl-2.6 gsl-2.6.tar.gz
      - name: Install HDF5
        run: |
          curl -L https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.gz --output hdf5-1.8.20.tar.gz
          tar -vxzf hdf5-1.8.20.tar.gz 
          cd hdf5-1.8.20 
          CC=gcc-11 CXX=g++-11 FC=gfortran-11 ./configure --prefix=/usr/local --enable-fortran --enable-production 
          make -j3
          sudo make install
          cd ..
          rm -rf hdf5-1.8.20 hdf5-1.8.20.tar.gz
      - name: Install FoX
        run: |
          curl -L https://github.com/andreww/fox/archive/refs/tags/4.1.0.tar.gz --output FoX-4.1.0.tar.gz
          tar xvfz FoX-4.1.0.tar.gz
          cd fox-4.1.0
          FC=gfortran-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf fox-4.1.0 FoX-4.1.0.tar.gz
      - name: Install FFTW3
        run: |
          curl -L ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4.tar.gz --output fftw-3.3.4.tar.gz
          tar xvfz fftw-3.3.4.tar.gz
          cd fftw-3.3.4
          F77=gfortran-11 CC=gcc-11 ./configure --prefix=/usr/local
          make -j4
          sudo make install
          cd ..
          rm -rf fftw-3.3.4 fftw-3.3.4.tar.gz
      - name: Install ANN
        run: |
          curl -L http://www.cs.umd.edu/~mount/ANN/Files/1.1.2/ann_1.1.2.tar.gz --output ann_1.1.2.tar.gz
          tar xvfz ann_1.1.2.tar.gz
          cd ann_1.1.2
          sed -E -i~ s/"C\+\+ = g\+\+"/"C\+\+ = g\+\+\-11"/ Make-config
          make macosx-g++
          cp bin/* /usr/local/bin/.
          cp lib/* /usr/local/lib/.
          cp -R include/* /usr/local/include/.
      - name: Install IO::Socket::SSL
        run: |
          curl -L https://cpan.metacpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.90.tar.gz --output Net-SSLeay-1.90.tar.gz
          tar xvfz Net-SSLeay-1.90.tar.gz
          cd Net-SSLeay-1.90
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/S/SU/SULLR/IO-Socket-SSL-1.966.tar.gz --output IO-Socket-SSL-1.966.tar.gz
          tar xvfz IO-Socket-SSL-1.966.tar.gz
          cd IO-Socket-SSL-1.966
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/M/MK/MKODERER/Sys-CPU-0.52.tar.gz --output Sys-CPU-0.52.tar.gz
          tar xvfz Sys-CPU-0.52.tar.gz
          cd Sys-CPU-0.52
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
      - name: Install CPAN
        run: |
          sudo perl -MCPAN -e shell
          sudo perl -MCPAN -e 'install Bundle::CPAN'
      - name: Install Perl modules
        run: |
          export CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE
          sudo perl -MCPAN -e 'force("install","NestedMap")'
          sudo perl -MCPAN -e 'force("install","Scalar::Util")'
          sudo perl -MCPAN -e 'force("install","Term::ANSIColor")'
          sudo perl -MCPAN -e 'force("install","Text::Table")'
          sudo perl -MCPAN -e 'force("install","ExtUtils::ParseXS")'
          sudo perl -MCPAN -e 'install Path::Tiny'
          sudo perl -MCPAN -e 'install PkgConfig'
          sudo perl -MCPAN -e 'install Alien::Base::Wrapper'
          sudo perl -MCPAN -e 'force("install","Alien::Libxml2")'
          sudo perl -MCPAN -e 'install XML::LibXML::SAX'
          sudo perl -MCPAN -e 'force("install","XML::SAX::ParserFactory")'
          sudo perl -MCPAN -e 'force("install","XML::Validator::Schema")'
          sudo perl -MCPAN -e 'force("install","Text::Template")'
          sudo perl -MCPAN -e 'force("install","List::Uniq")'
          sudo perl -MCPAN -e 'force("install","IO::Util")'
          sudo perl -MCPAN -e 'force("install","Class::Util")'
          sudo perl -MCPAN -e 'force("install","CGI::Builder")'
          sudo perl -MCPAN -e 'force("install","Simple")'
          sudo perl -MCPAN -e 'force("install","Readonly")'
          sudo perl -MCPAN -e 'force("install","File::Slurp")'
          sudo perl -MCPAN -e 'force("install","XML::Simple")'
          sudo perl -MCPAN -e 'force("install","List::MoreUtils")'
          sudo perl -MCPAN -e 'force("install","Clone")'
          sudo perl -MCPAN -e 'force("install","IO::Scalar")'
          sudo perl -MCPAN -e 'force("install","Regexp::Common")'
          sudo perl -MCPAN -e 'install LaTeX::Encode'
          sudo perl -MCPAN -e 'install Sub::Identify'
      - name: Build Galacticus
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include -I/usr/local/include/libqhullcpp"
          export BUILDPATH=./work/build
          make -j3 all 2>&1 | tee build.log
      - name: Upload executables
        uses: actions/upload-artifact@v2
        with:
          name: galacticus-macos-execs
          path: '**.exe'
      - run: echo "This job's status is ${{ job.status }}."
  Tests-Hashes-Cryptographic:
    runs-on: macos-11
    needs: Build-Executables
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Check out repository datasets
        uses: actions/checkout@v2      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v2
        with:
          name: galacticus-macos-execs
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./tests.hashes.cryptographic.exe
          ./tests.hashes.cryptographic.exe 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
