name: 'CI/CD'
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - 'master'
    paths:
      - 'Makefile'
      - 'source/**'
      - 'source/Bivar/**'
      - 'source/ISO_Varying_String/**'
      - 'source/gslODEInitVal2/**'
      - 'source/NSWC/**'
      - 'source/pFq/**'
      - 'source/gslSpecFuncApprox/**'
      - 'source/FFTlog/**'
      - 'perl/**'
      - 'perl/File/**'
      - 'perl/Galacticus/**'
      - 'perl/Galacticus/Launch/**'
      - 'perl/Galacticus/Constraints/**'
      - 'perl/Galacticus/Build/**'
      - 'perl/Galacticus/Build/Components/**'
      - 'perl/Galacticus/Build/Components/Classes/**'
      - 'perl/Galacticus/Build/Components/Implementations/**'
      - 'perl/Galacticus/Build/Components/Properties/**'
      - 'perl/Galacticus/Build/Components/TreeNodes/**'
      - 'perl/Galacticus/Build/Components/Hierarchy/**'
      - 'perl/Galacticus/Build/SourceTree/**'
      - 'perl/Galacticus/Build/SourceTree/Parse/**'
      - 'perl/Galacticus/Build/SourceTree/Analyze/**'
      - 'perl/Galacticus/Build/SourceTree/Process/**'
      - 'perl/Galacticus/Build/SourceTree/Process/FunctionClass/**'
      - 'perl/List/**'
      - 'perl/Sort/**'
      - 'perl/LaTeX/**'
      - 'perl/IO/**'
      - 'perl/IO/Compress/**'
      - 'perl/System/**'
      - 'perl/Fortran/**'
      - 'scripts/build/**'
      - 'schema/**'
concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true  
defaults:
  run:
    shell: bash
jobs:
  # Build and deploy
  ## Linux
  ### Static executable and test codes
  Build-Executable-Linux:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS=$GALACTICUS_FCFLAGS -static" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          export BUILDPATH=./work/build
          set -o pipefail
          make GALACTICUS_BUILD_OPTION=compileprof -j2 all 2>&1 | tee build.log
          set +o pipefail
          chmod u=wrx ./scripts/build/buildProfiler.pl
          ./scripts/build/buildProfiler.pl build.log buildProfile.html --durationMinimum 20
          ! grep -n Error: build.log
          ! grep -n Warning: build.log
          ! grep -v 'is up to date' build.log | grep -n -C 5 make:
      - name: Upload Galacticus executable
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-exec
          path: 'Galacticus.exe'
      - name: Upload test code executables
        uses: actions/upload-artifact@v4
        with:
          name: test-execs
          path: 'tests.*.exe'
      - name: Upload build profile
        uses: actions/upload-artifact@v4
        with:
          name: build-profile
          path: 'buildProfile.html'
      - run: echo "This job's status is ${{ job.status }}."
  ### Non-static executable
  Build-Executable-Linux-Non-Static:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          export BUILDPATH=./work/build
          set -o pipefail
          make -j2 Galacticus.exe 2>&1 | tee build.log
          set +o pipefail
          ! grep -n Error: build.log
          ! grep -n Warning: build.log
          ! grep -v 'is up to date' build.log | grep -n -C 5 make:
      - name: Upload Galacticus executable
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-exec-non-static
          path: 'Galacticus.exe'
      - run: echo "This job's status is ${{ job.status }}."
  ### Executable instrumented
  Build-Executables-Instrumented-Linux:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          export GALACTICUS_FCFLAGS="$GALACTICUS_FCFLAGS -pg"
          export GALACTICUS_CFLAGS="$GALACTICUS_CFLAGS -pg"
          export GALACTICUS_CPPFLAGS="$GALACTICUS_CPPFLAGS -pg"
          make -j2 Galacticus.exe
      - name: Upload executables
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-exec-instrumented
          path: 'Galacticus.exe'
      - run: echo "This job's status is ${{ job.status }}."
  ### Executable MPI
  Build-Executables-MPI-Linux:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          make -j2 GALACTICUS_BUILD_OPTION=MPI Galacticus.exe tests.MPI.exe tests.radiative_transfer.atomic_matter.state_solver.exe
      - name: Upload Galacticus executable
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-exec-MPI
          path: 'Galacticus.exe'
      - name: Upload test code executables
        uses: actions/upload-artifact@v4
        with:
          name: test-execs-MPI
          path: 'tests.*.exe'
      - run: echo "This job's status is ${{ job.status }}."
  ### Executable debugging
  Build-Executables-Debugging-Linux:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS+=\ -DDEBUGGING" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          make -j2 Galacticus.exe tests.debugging.exe
      - name: Upload test code executables
        uses: actions/upload-artifact@v4
        with:
          name: test-execs-debugging
          path: 'tests.*.exe'
      - run: echo "This job's status is ${{ job.status }}."
  ### Library
  Build-Library-Linux:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          make -j2 GALACTICUS_BUILD_OPTION=lib libgalacticus.so
      - name: Package the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          mkdir galacticus
          mkdir galacticus/lib
          mkdir galacticus/python
          # Find all dynamic libraries needed (filtering out some system libs) and copy to our folder.
          ldd libgalacticus.so | awk '{if (NF == 4) print $3}' | grep -v -e /libc.so -e /libdl.so -e /libm.so -e /libpthread.so -e /librt.so | xargs -n 1 -i{} cp {} galacticus/lib/
          mv galacticus.py galacticus/python/
          mv libgalacticus.so galacticus/lib/
          tar cvfj libgalacticus.tar.bz2 galacticus
      - name: Upload library
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-library
          path: 'libgalacticus.tar.bz2'
      - run: echo "This job's status is ${{ job.status }}."
  ### Docker image
  Build-Docker-Linux:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: "Detect PR build"
        id: detectBranch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
             echo Running on a PR - will build, but not push
             echo "doPush=false" >> "$GITHUB_OUTPUT"
          else
             echo Running on a non-PR - will build and push
             echo "doPush=true"  >> "$GITHUB_OUTPUT"
          fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: galacticusorg/galacticus
      - name: Build and push Docker image 
        uses: docker/build-push-action@v5
        with:
          push: ${{ steps.detectBranch.outputs.doPush }}
          tags: ghcr.io/galacticusorg/galacticus:latest
          labels: ${{ steps.meta.outputs.labels }}
  ### Documentation
  Build-Documentation-Linux:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Build the docs
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          ./scripts/doc/Build_Documentation.sh -f yes -p 2
      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-docs
          path: |
            ./doc/Galacticus_Usage.pdf
            ./doc/Galacticus_Physics.pdf
            ./doc/Galacticus_Development.pdf
            ./doc/Galacticus_Source.pdf
      - run: echo "This job's status is ${{ job.status }}."
  ### Tools
  Build-Tools:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS+=\ -static" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Build tools
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          mkdir -p $GALACTICUS_DATA_PATH/dynamic
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe parameters/buildTools.xml
          cd $GALACTICUS_DATA_PATH
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          tar cfj tools.tar.bz2 \
            dynamic/CAMB-${cambVersion}/fortran/camb \
            dynamic/AxionCAMB/camb \
            dynamic/class_public-${classVersion}/class \
            dynamic/RecFast/recfast.exe \
            dynamic/RecFast/currentVersion \
            dynamic/c${cloudyVersion}/source/cloudy.exe \
            dynamic/c${cloudyVersion}/data \
            dynamic/fsps-${fspsVersion}/src/autosps.exe \
            dynamic/fsps-${fspsVersion}/dust \
            dynamic/fsps-${fspsVersion}/data \
            dynamic/fsps-${fspsVersion}/nebular \
            dynamic/fsps-${fspsVersion}/SPECTRA \
            dynamic/fsps-${fspsVersion}/OUTPUTS \
            dynamic/fsps-${fspsVersion}/ISOCHRONES
      - name: Upload tools
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-tools
          path: ./datasets/tools.tar.bz2
      - run: echo "This job's status is ${{ job.status }}."
  ## MacOS
  ### Static executable
  Build-Executable-MacOS:
    runs-on: macos-11
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS=\"$GALACTICUS_FCFLAGS -fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib\"" >> $GITHUB_ENV
          echo "PATH=$PATH:/opt/local/bin:/usr/local/bin" >> $GITHUB_ENV
          echo "PERL_MM_USE_DEFAULT=1" >> $GITHUB_ENV
      - name: Install MacPorts
        run: |
          curl -L https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg --output MacPorts-2.7.1-11-BigSur.pkg
          sudo installer -pkg ./MacPorts-2.7.1-11-BigSur.pkg -target /
          rm ./MacPorts-2.7.1-11-BigSur.pkg
      - name: Install guile
        run: sudo port install guile18
      - name: Install libmatheval
        run: |
          curl -L https://github.com/galacticusorg/libmatheval/releases/download/latest/libmatheval-1.1.12.tar.gz --output libmatheval-1.1.12.tar.gz
          tar xvfz libmatheval-1.1.12.tar.gz
          cd libmatheval-1.1.12
          # Patch following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          sed -E -i~ s/"#undef HAVE_SCM_T_BITS"/"#define HAVE_SCM_T_BITS 1"/ config.h.in
          sed -E -i~ s/"-lguile"/"-lguile18"/ configure
          sed -E -i~ s/"libguile.h"/"libguile18.h"/g configure tests/matheval.c
          # Set guile paths following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          CC=gcc-11 GUILE=/opt/local/bin/guile18 GUILE_CONFIG=/opt/local/bin/guile18-config GUILE_TOOLS=/opt/local/bin/guile18-tools ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf libmatheval-1.1.12.tar.gz libmatheval-1.1.12
      - name: Install qhull
        run: |
          curl -L http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz --output qhull-2020-src-8.0.2.tgz
          tar xvfz qhull-2020-src-8.0.2.tgz
          cd qhull-2020.2
          make -j3 CC=gcc-11 CXX=g++-11
          sudo make install
          cd ..
          rm -rf qhull-2020-src-8.0.2.tgz qhull-2020.2
      - name: Install GSL
        run: |
          curl -L ftp://ftp.gnu.org/gnu/gsl/gsl-2.6.tar.gz --output gsl-2.6.tar.gz
          tar xvfz gsl-2.6.tar.gz
          cd gsl-2.6
          CC=gcc-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf gsl-2.6 gsl-2.6.tar.gz
      - name: Install HDF5
        run: |
          curl -L https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.gz --output hdf5-1.8.20.tar.gz
          tar -vxzf hdf5-1.8.20.tar.gz 
          cd hdf5-1.8.20 
          CC=gcc-11 CXX=g++-11 FC=gfortran-11 ./configure --prefix=/usr/local --enable-fortran --enable-production 
          make -j3
          sudo make install
          cd ..
          rm -rf hdf5-1.8.20 hdf5-1.8.20.tar.gz
      - name: Install FoX
        run: |
          curl -L https://github.com/andreww/fox/archive/refs/tags/4.1.0.tar.gz --output FoX-4.1.0.tar.gz
          tar xvfz FoX-4.1.0.tar.gz
          cd fox-4.1.0
          FC=gfortran-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf fox-4.1.0 FoX-4.1.0.tar.gz
      - name: Install FFTW3
        run: |
          curl -L ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4.tar.gz --output fftw-3.3.4.tar.gz
          tar xvfz fftw-3.3.4.tar.gz
          cd fftw-3.3.4
          F77=gfortran-11 CC=gcc-11 ./configure --prefix=/usr/local
          make -j4
          sudo make install
          cd ..
          rm -rf fftw-3.3.4 fftw-3.3.4.tar.gz
      - name: Install ANN
        run: |
          curl -L http://www.cs.umd.edu/~mount/ANN/Files/1.1.2/ann_1.1.2.tar.gz --output ann_1.1.2.tar.gz
          tar xvfz ann_1.1.2.tar.gz
          cd ann_1.1.2
          sed -E -i~ s/"C\+\+ = g\+\+"/"C\+\+ = g\+\+\-11"/ Make-config
          make macosx-g++
          cp bin/* /usr/local/bin/.
          cp lib/* /usr/local/lib/.
          cp -R include/* /usr/local/include/.
      - name: Install IO::Socket::SSL
        run: |
          curl -L https://cpan.metacpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.90.tar.gz --output Net-SSLeay-1.90.tar.gz
          tar xvfz Net-SSLeay-1.90.tar.gz
          cd Net-SSLeay-1.90
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/S/SU/SULLR/IO-Socket-SSL-1.966.tar.gz --output IO-Socket-SSL-1.966.tar.gz
          tar xvfz IO-Socket-SSL-1.966.tar.gz
          cd IO-Socket-SSL-1.966
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/M/MK/MKODERER/Sys-CPU-0.52.tar.gz --output Sys-CPU-0.52.tar.gz
          tar xvfz Sys-CPU-0.52.tar.gz
          cd Sys-CPU-0.52
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
      - name: Install CPAN
        run: |
          sudo perl -MCPAN -e shell
          sudo perl -MCPAN -e 'install Bundle::CPAN'
      - name: Install Perl modules
        run: |
          export CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE
          sudo perl -MCPAN -e 'force("install","NestedMap")'
          sudo perl -MCPAN -e 'force("install","Scalar::Util")'
          sudo perl -MCPAN -e 'force("install","Term::ANSIColor")'
          sudo perl -MCPAN -e 'force("install","Text::Table")'
          sudo perl -MCPAN -e 'force("install","ExtUtils::ParseXS")'
          sudo perl -MCPAN -e 'install Path::Tiny'
          sudo perl -MCPAN -e 'install PkgConfig'
          sudo perl -MCPAN -e 'install Alien::Base::Wrapper'
          sudo perl -MCPAN -e 'force("install","Alien::Libxml2")'
          sudo perl -MCPAN -e 'install XML::LibXML::SAX'
          sudo perl -MCPAN -e 'force("install","XML::SAX::ParserFactory")'
          sudo perl -MCPAN -e 'force("install","XML::Validator::Schema")'
          sudo perl -MCPAN -e 'force("install","Text::Template")'
          sudo perl -MCPAN -e 'force("install","List::Uniq")'
          sudo perl -MCPAN -e 'force("install","IO::Util")'
          sudo perl -MCPAN -e 'force("install","Class::Util")'
          sudo perl -MCPAN -e 'force("install","CGI::Builder")'
          sudo perl -MCPAN -e 'force("install","Simple")'
          sudo perl -MCPAN -e 'force("install","Readonly")'
          sudo perl -MCPAN -e 'force("install","File::Slurp")'
          sudo perl -MCPAN -e 'force("install","XML::Simple")'
          sudo perl -MCPAN -e 'force("install","List::MoreUtils")'
          sudo perl -MCPAN -e 'force("install","Clone")'
          sudo perl -MCPAN -e 'force("install","IO::Scalar")'
          sudo perl -MCPAN -e 'force("install","Regexp::Common")'
          sudo perl -MCPAN -e 'install LaTeX::Encode'
          sudo perl -MCPAN -e 'install Sub::Identify'
      - name: Build Galacticus
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include -I/usr/local/include/libqhullcpp"
          export BUILDPATH=./work/build
          set -o pipefail
          make -j3 Galacticus.exe tests.hashes.cryptographic.exe 2>&1 | tee build.log
          ./scripts/build/staticRelinker.pl `grep '\-o Galacticus.exe' build.log`
          ./scripts/build/staticRelinker.pl `grep '\-o tests.hashes.cryptographic.exe' build.log`
          dsymutil -o Galacticus.exe.dSYM Galacticus.exe
          zip -r debugSymbolsMacOS.zip Galacticus.exe.dSYM
          mv Galacticus.exe Galacticus_MacOS.exe
      - name: Upload Galacticus executable
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-exec-MacOS
          path: 'Galacticus_MacOS.exe'
      - name: Upload test code executables
        uses: actions/upload-artifact@v4
        with:
          name: test-execs-MacOS
          path: 'tests.*.exe'
      - name: Upload Galacticus debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-debug-MacOS
          path: 'debugSymbolsMacOS.zip'
  ## Library
  Build-Library-MacOS:
    runs-on: macos-11
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS=\"$GALACTICUS_FCFLAGS -fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib\"" >> $GITHUB_ENV
          echo "PATH=$PATH:/opt/local/bin:/usr/local/bin" >> $GITHUB_ENV
          echo "PERL_MM_USE_DEFAULT=1" >> $GITHUB_ENV
      - name: Install MacPorts
        run: |
          curl -L https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg --output MacPorts-2.7.1-11-BigSur.pkg
          sudo installer -pkg ./MacPorts-2.7.1-11-BigSur.pkg -target /
          rm ./MacPorts-2.7.1-11-BigSur.pkg
      - name: Install guile
        run: sudo port install guile18
      - name: Install libmatheval
        run: |
          curl -L https://github.com/galacticusorg/libmatheval/releases/download/latest/libmatheval-1.1.12.tar.gz --output libmatheval-1.1.12.tar.gz
          tar xvfz libmatheval-1.1.12.tar.gz
          cd libmatheval-1.1.12
          # Patch following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          sed -E -i~ s/"#undef HAVE_SCM_T_BITS"/"#define HAVE_SCM_T_BITS 1"/ config.h.in
          sed -E -i~ s/"-lguile"/"-lguile18"/ configure
          sed -E -i~ s/"libguile.h"/"libguile18.h"/g configure tests/matheval.c
          # Set guile paths following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          CC=gcc-11 GUILE=/opt/local/bin/guile18 GUILE_CONFIG=/opt/local/bin/guile18-config GUILE_TOOLS=/opt/local/bin/guile18-tools ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf libmatheval-1.1.12.tar.gz libmatheval-1.1.12
      - name: Install qhull
        run: |
          curl -L http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz --output qhull-2020-src-8.0.2.tgz
          tar xvfz qhull-2020-src-8.0.2.tgz
          cd qhull-2020.2
          make -j3 CC=gcc-11 CXX=g++-11
          sudo make install
          cd ..
          rm -rf qhull-2020-src-8.0.2.tgz qhull-2020.2
      - name: Install GSL
        run: |
          curl -L ftp://ftp.gnu.org/gnu/gsl/gsl-2.6.tar.gz --output gsl-2.6.tar.gz
          tar xvfz gsl-2.6.tar.gz
          cd gsl-2.6
          CC=gcc-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf gsl-2.6 gsl-2.6.tar.gz
      - name: Install HDF5
        run: |
          curl -L https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.gz --output hdf5-1.8.20.tar.gz
          tar -vxzf hdf5-1.8.20.tar.gz 
          cd hdf5-1.8.20 
          CC=gcc-11 CXX=g++-11 FC=gfortran-11 ./configure --prefix=/usr/local --enable-fortran --enable-production 
          make -j3
          sudo make install
          cd ..
          rm -rf hdf5-1.8.20 hdf5-1.8.20.tar.gz 
      - name: Install FoX
        run: |
          curl -L https://github.com/andreww/fox/archive/refs/tags/4.1.0.tar.gz --output FoX-4.1.0.tar.gz
          tar xvfz FoX-4.1.0.tar.gz
          cd fox-4.1.0
          FC=gfortran-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf fox-4.1.0 FoX-4.1.0.tar.gz
      - name: Install FFTW3
        run: |
          curl -L ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4.tar.gz --output fftw-3.3.4.tar.gz
          tar xvfz fftw-3.3.4.tar.gz
          cd fftw-3.3.4
          F77=gfortran-11 CC=gcc-11 ./configure --prefix=/usr/local
          make -j4
          sudo make install
          cd ..
          rm -rf fftw-3.3.4 fftw-3.3.4.tar.gz
      - name: Install ANN
        run: |
          curl -L http://www.cs.umd.edu/~mount/ANN/Files/1.1.2/ann_1.1.2.tar.gz --output ann_1.1.2.tar.gz
          tar xvfz ann_1.1.2.tar.gz
          cd ann_1.1.2
          sed -E -i~ s/"C\+\+ = g\+\+"/"C\+\+ = g\+\+\-11"/ Make-config
          make macosx-g++
          cp bin/* /usr/local/bin/.
          cp lib/* /usr/local/lib/.
          cp -R include/* /usr/local/include/.
      - name: Install IO::Socket::SSL
        run: |
          curl -L https://cpan.metacpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.90.tar.gz --output Net-SSLeay-1.90.tar.gz
          tar xvfz Net-SSLeay-1.90.tar.gz
          cd Net-SSLeay-1.90
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/S/SU/SULLR/IO-Socket-SSL-1.966.tar.gz --output IO-Socket-SSL-1.966.tar.gz
          tar xvfz IO-Socket-SSL-1.966.tar.gz
          cd IO-Socket-SSL-1.966
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/M/MK/MKODERER/Sys-CPU-0.52.tar.gz --output Sys-CPU-0.52.tar.gz
          tar xvfz Sys-CPU-0.52.tar.gz
          cd Sys-CPU-0.52
          perl Makefile.PL
          make -j3
          sudo make install
      - name: Install CPAN
        run: |
          sudo perl -MCPAN -e shell
          sudo perl -MCPAN -e 'install Bundle::CPAN'
      - name: Install Perl modules
        run: |
          export CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE
          sudo perl -MCPAN -e 'force("install","NestedMap")'
          sudo perl -MCPAN -e 'force("install","Scalar::Util")'
          sudo perl -MCPAN -e 'force("install","Term::ANSIColor")'
          sudo perl -MCPAN -e 'force("install","Text::Table")'
          sudo perl -MCPAN -e 'force("install","ExtUtils::ParseXS")'
          sudo perl -MCPAN -e 'install Path::Tiny'
          sudo perl -MCPAN -e 'install PkgConfig'
          sudo perl -MCPAN -e 'install Alien::Base::Wrapper'
          sudo perl -MCPAN -e 'force("install","Alien::Libxml2")'
          sudo perl -MCPAN -e 'install XML::LibXML::SAX'
          sudo perl -MCPAN -e 'force("install","XML::SAX::ParserFactory")'
          sudo perl -MCPAN -e 'force("install","XML::Validator::Schema")'
          sudo perl -MCPAN -e 'force("install","Text::Template")'
          sudo perl -MCPAN -e 'force("install","List::Uniq")'
          sudo perl -MCPAN -e 'force("install","IO::Util")'
          sudo perl -MCPAN -e 'force("install","Class::Util")'
          sudo perl -MCPAN -e 'force("install","CGI::Builder")'
          sudo perl -MCPAN -e 'force("install","Simple")'
          sudo perl -MCPAN -e 'force("install","Readonly")'
          sudo perl -MCPAN -e 'force("install","File::Slurp")'
          sudo perl -MCPAN -e 'force("install","XML::Simple")'
          sudo perl -MCPAN -e 'force("install","List::MoreUtils")'
          sudo perl -MCPAN -e 'force("install","Clone")'
          sudo perl -MCPAN -e 'force("install","IO::Scalar")'
          sudo perl -MCPAN -e 'force("install","Regexp::Common")'
          sudo perl -MCPAN -e 'install LaTeX::Encode'
          sudo perl -MCPAN -e 'install Sub::Identify'
      - name: Build Galacticus
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include -I/usr/local/include/libqhullcpp"
          make -j3 GALACTICUS_BUILD_OPTION=lib libgalacticus.so
      - name: Package the code
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include -I/usr/local/include/libqhullcpp"
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          mkdir galacticus
          mkdir galacticus/lib
          mkdir galacticus/python
          # Find all dynamic libraries needed (filtering out any non-"local" ones) and copy to our folder.
          otool -L libgalacticus.so | awk '{if (NR > 1) print $1}' | grep -e /usr/local -e /opt/local | xargs -n 1 -I{} cp {} galacticus/lib/
          mv galacticus.py galacticus/python/
          mv libgalacticus.so galacticus/lib/
          zip -r libgalacticusMacOS.zip galacticus
      - name: Upload library
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-library-MacOS
          path: 'libgalacticusMacOS.zip'
  ### Tools
  Build-Tools-MacOS:
    runs-on: macos-11
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS=\"$GALACTICUS_FCFLAGS -static -fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib\"" >> $GITHUB_ENV
          echo "PATH=$PATH:/opt/local/bin:/usr/local/bin" >> $GITHUB_ENV
          echo "PERL_MM_USE_DEFAULT=1" >> $GITHUB_ENV
      - name: Install MacPorts
        run: |
          curl -L https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg --output MacPorts-2.7.1-11-BigSur.pkg
          sudo installer -pkg ./MacPorts-2.7.1-11-BigSur.pkg -target /
          rm ./MacPorts-2.7.1-11-BigSur.pkg
      - name: Install guile
        run: sudo port install guile18
      - name: Install libmatheval
        run: |
          curl -L https://github.com/galacticusorg/libmatheval/releases/download/latest/libmatheval-1.1.12.tar.gz --output libmatheval-1.1.12.tar.gz
          tar xvfz libmatheval-1.1.12.tar.gz
          cd libmatheval-1.1.12
          # Patch following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          sed -E -i~ s/"#undef HAVE_SCM_T_BITS"/"#define HAVE_SCM_T_BITS 1"/ config.h.in
          sed -E -i~ s/"-lguile"/"-lguile18"/ configure
          sed -E -i~ s/"libguile.h"/"libguile18.h"/g configure tests/matheval.c
          # Set guile paths following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          CC=gcc-11 GUILE=/opt/local/bin/guile18 GUILE_CONFIG=/opt/local/bin/guile18-config GUILE_TOOLS=/opt/local/bin/guile18-tools ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf libmatheval-1.1.12.tar.gz libmatheval-1.1.12
      - name: Install md5sum
        run: sudo port install md5sha1sum
      - name: Install GSL
        run: |
          curl -L ftp://ftp.gnu.org/gnu/gsl/gsl-2.6.tar.gz --output gsl-2.6.tar.gz
          tar xvfz gsl-2.6.tar.gz
          cd gsl-2.6
          CC=gcc-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          rm -rf gsl-2.6 gsl-2.6.tar.gz
      - name: Install HDF5
        run: |
          curl -L https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.gz --output hdf5-1.8.20.tar.gz
          tar -vxzf hdf5-1.8.20.tar.gz 
          cd hdf5-1.8.20 
          CC=gcc-11 CXX=g++-11 FC=gfortran-11 ./configure --prefix=/usr/local --enable-fortran --enable-production 
          make -j3
          sudo make install
          rm -rf hdf5-1.8.20 hdf5-1.8.20.tar.gz 
      - name: Install FoX
        run: |
          curl -L https://github.com/andreww/fox/archive/refs/tags/4.1.0.tar.gz --output FoX-4.1.0.tar.gz
          tar xvfz FoX-4.1.0.tar.gz
          cd fox-4.1.0
          FC=gfortran-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          rm -rf fox-4.1.0 FoX-4.1.0.tar.gz
      - name: Install FFTW3
        run: |
          curl -L ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4.tar.gz --output fftw-3.3.4.tar.gz
          tar xvfz fftw-3.3.4.tar.gz
          cd fftw-3.3.4
          F77=gfortran-11 CC=gcc-11 ./configure --prefix=/usr/local
          make -j4
          sudo make install
          rm -rf fftw-3.3.4 fftw-3.3.4.tar.gz
      - name: Install ANN
        run: |
          curl -L http://www.cs.umd.edu/~mount/ANN/Files/1.1.2/ann_1.1.2.tar.gz --output ann_1.1.2.tar.gz
          tar xvfz ann_1.1.2.tar.gz
          cd ann_1.1.2
          sed -E -i~ s/"C\+\+ = g\+\+"/"C\+\+ = g\+\+\-11"/ Make-config
          make macosx-g++
          cp bin/* /usr/local/bin/.
          cp lib/* /usr/local/lib/.
          cp -R include/* /usr/local/include/.
      - name: Install IO::Socket::SSL
        run: |
          curl -L https://cpan.metacpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.90.tar.gz --output Net-SSLeay-1.90.tar.gz
          tar xvfz Net-SSLeay-1.90.tar.gz
          cd Net-SSLeay-1.90
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/S/SU/SULLR/IO-Socket-SSL-1.966.tar.gz --output IO-Socket-SSL-1.966.tar.gz
          tar xvfz IO-Socket-SSL-1.966.tar.gz
          cd IO-Socket-SSL-1.966
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
      - name: Install CPAN
        run: |
          sudo perl -MCPAN -e shell
          sudo perl -MCPAN  -e 'install Bundle::CPAN'
      - name: Install Perl modules
        run: |
          export CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE
          sudo perl -MCPAN -e 'force("install","NestedMap")'
          sudo perl -MCPAN -e 'force("install","Scalar::Util")'
          sudo perl -MCPAN -e 'force("install","Term::ANSIColor")'
          sudo perl -MCPAN -e 'force("install","Text::Table")'
          sudo perl -MCPAN -e 'force("install","ExtUtils::ParseXS")'
          sudo perl -MCPAN -e 'install Path::Tiny'
          sudo perl -MCPAN -e 'install PkgConfig'
          sudo perl -MCPAN -e 'install Alien::Base::Wrapper'
          sudo perl -MCPAN -e 'force("install","Alien::Libxml2")'
          sudo perl -MCPAN -e 'install XML::LibXML::SAX'
          sudo perl -MCPAN -e 'force("install","XML::SAX::ParserFactory")'
          sudo perl -MCPAN -e 'force("install","XML::Validator::Schema")'
          sudo perl -MCPAN -e 'force("install","Text::Template")'
          sudo perl -MCPAN -e 'force("install","List::Uniq")'
          sudo perl -MCPAN -e 'force("install","IO::Util")'
          sudo perl -MCPAN -e 'force("install","Class::Util")'
          sudo perl -MCPAN -e 'force("install","CGI::Builder")'
          sudo perl -MCPAN -e 'force("install","Simple")'
          sudo perl -MCPAN -e 'force("install","Readonly")'
          sudo perl -MCPAN -e 'force("install","File::Slurp")'
          sudo perl -MCPAN -e 'force("install","XML::Simple")'
          sudo perl -MCPAN -e 'force("install","List::MoreUtils")'
          sudo perl -MCPAN -e 'force("install","Clone")'
          sudo perl -MCPAN -e 'force("install","IO::Scalar")' 
          sudo perl -MCPAN -e 'force("install","Regexp::Common")'
          sudo perl -MCPAN -e 'install LaTeX::Encode'
          sudo perl -MCPAN -e 'install Sub::Identify'
          sudo perl -MCPAN -e 'install Sys::CPU'
      - name: Build Galacticus
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include"
          make -j3 Galacticus.exe
      - name: Build tools
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/include -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include"
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          mkdir -p $GALACTICUS_DATA_PATH/dynamic
          set -o pipefail
          ./Galacticus.exe parameters/buildTools.xml 2>&1 | tee build.log
          cd $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion}/fortran/
          $GALACTICUS_EXEC_PATH/scripts/build/staticRelinker.pl gfortran-11 -cpp -Ofast -fopenmp -fintrinsic-modules-path /usr/local/include -L/usr/local/lib -L/opt/local/lib -JRelease -IRelease/ -I"/Users/runner/work/galacticus/galacticus/datasets/dynamic/CAMB-${cambVersion}/fortran/../forutils/Release/" Release/inidriver.o Release/libcamb.a  -L"/Users/runner/work/galacticus/galacticus/datasets/dynamic/CAMB-${cambVersion}/fortran/../forutils/Release/" -lforutils -o camb
          cd $GALACTICUS_DATA_PATH/dynamic/AxionCAMB/
          $GALACTICUS_EXEC_PATH/scripts/build/staticRelinker.pl gfortran-11 -O3 -fintrinsic-modules-path /usr/local/include -L/usr/local/lib -L/opt/local/lib constants.o utils.o  subroutines.o inifile.o power_tilt.o recfast_axion.o reionization.o modules.o bessels.o equations_ppf.o halofit_ppf.o lensing.o SeparableBispectrum.o cmbmain.o camb.o axion_background.o inidriver_axion.F90 -o camb          
          cd $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion}/
          $GALACTICUS_EXEC_PATH/scripts/build/staticRelinker.pl `grep -E '\-o class ' $GALACTICUS_EXEC_PATH/build.log`
          cd $GALACTICUS_DATA_PATH/dynamic/RecFast/
          $GALACTICUS_EXEC_PATH/scripts/build/staticRelinker.pl gfortran-11 recfast.for -o recfast.exe -O3 -ffixed-form -ffixed-line-length-none
          cd $GALACTICUS_DATA_PATH/dynamic/c${cloudyVersion}/source/
          $GALACTICUS_EXEC_PATH/scripts/build/staticRelinker.pl `grep -E '\-o cloudy.exe' $GALACTICUS_EXEC_PATH/build.log`
          cd $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion}/src
          $GALACTICUS_EXEC_PATH/scripts/build/staticRelinker.pl `grep -E '\-o autosps.exe' $GALACTICUS_EXEC_PATH/build.log`
          cd $GALACTICUS_DATA_PATH
          zip -r toolsMacOS.zip \
            dynamic/CAMB-${cambVersion}/fortran/camb \
            dynamic/AxionCAMB/camb \
            dynamic/class_public-${classVersion}/class \
            dynamic/RecFast/recfast.exe \
            dynamic/RecFast/currentVersion \
            dynamic/c${cloudyVersion}/source/cloudy.exe \
            dynamic/c${cloudyVersion}/data \
            dynamic/fsps-${fspsVersion}/src/autosps.exe \
            dynamic/fsps-${fspsVersion}/dust \
            dynamic/fsps-${fspsVersion}/data \
            dynamic/fsps-${fspsVersion}/nebular \
            dynamic/fsps-${fspsVersion}/SPECTRA \
            dynamic/fsps-${fspsVersion}/OUTPUTS \
            dynamic/fsps-${fspsVersion}/ISOCHRONES
      - name: Upload Galacticus executable
        uses: actions/upload-artifact@v4
        with:
          name: galacticus-tools-MacOS
          path: './datasets/toolsMacOS.zip'
      - run: echo "This job's status is ${{ job.status }}."
  # Benchmarks
  Benchmark-Dark-Matter-Only-Subhalos:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade
          apt install -y time
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./benchmark-darkMatterOnlySubhalos.pl
          set -o pipefail
          ./benchmark-darkMatterOnlySubhalos.pl 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - name: Upload benchmark result
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-darkMatterOnlySubhalos
          path: testSuite/outputs/benchmark_darkMatterOnlySubhalos.json
      - run: echo "This job's status is ${{ job.status }}."
  Benchmark-Milky-Way-Model:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: Cache dynamically-generated datasets
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/datasets/dynamic
          key: benchmarks-milkyWay-${{ github.run_id }}
          restore-keys: |
            benchmarks-milkyWay
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade
          apt install -y time
      - name: Mark time for cache accesses
        run: |
          echo mark > mark.time
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./benchmark-milkyWay.pl
          set -o pipefail
          ./benchmark-milkyWay.pl 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - name: Upload benchmark result
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-milkyWay
          path: testSuite/outputs/benchmark_milkyWay.json
      - name: "Clean datasets"
        run: |
          echo Removing outdated dynamically-generated datasets
          echo Retaining:
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -anewer mark.time -print
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -not -anewer mark.time -print0 | xargs --no-run-if-empty -0 rm
      - run: echo "This job's status is ${{ job.status }}."
  # Profiling
  Profile-Dark-Matter-Only-Subhalos:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/galacticusorg/buildenv:latest
      options: --privileged
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade && apt autoremove
          apt install -y linux-tools-$(uname -r) linux-tools-generic bzip2
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe ./testSuite/parameters/benchmark_darkMatterOnlySubHalos.xml  
          perf record -g -e cycles --call-graph dwarf -F 500 -o ./testSuite/outputs/darkMatterOnlySubhalos.perf.data ./Galacticus.exe ./testSuite/parameters/benchmark_darkMatterOnlySubHalos.xml
          perf script -i ./testSuite/outputs/darkMatterOnlySubhalos.perf.data > ./testSuite/outputs/darkMatterOnlySubhalos.perf
          du -sh ./testSuite/outputs/darkMatterOnlySubhalos.perf
          bzip2 ./testSuite/outputs/darkMatterOnlySubhalos.perf
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-darkMatterOnlySubhalos
          path: './testSuite/outputs/darkMatterOnlySubhalos.perf.bz2'
  Profile-Milky-Way-Model:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/galacticusorg/buildenv:latest
      options: --privileged
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: Cache dynamically-generated datasets
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/datasets/dynamic
          key: benchmarks-milkyWay-${{ github.run_id }}
          restore-keys: |
            benchmarks-milkyWay
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade && apt autoremove
          apt install -y linux-tools-$(uname -r) linux-tools-generic bzip2
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Mark time for cache accesses
        run: |
          echo mark > mark.time
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay.xml  
          perf record -g -e cycles --call-graph dwarf -F 100 -o ./testSuite/outputs/milkyWay.perf.data ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay.xml
          perf script -i ./testSuite/outputs/milkyWay.perf.data > ./testSuite/outputs/milkyWay.perf
          du -sh ./testSuite/outputs/milkyWay.perf
          bzip2 ./testSuite/outputs/milkyWay.perf
      - name: "Clean datasets"
        run: |
          echo Removing outdated dynamically-generated datasets
          echo Retaining:
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -anewer mark.time -print
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -not -anewer mark.time -print0 | xargs --no-run-if-empty -0 rm
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-milkyWay
          path: './testSuite/outputs/milkyWay.perf.bz2'
  Profile-Milky-Way-SIDM-Model:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/galacticusorg/buildenv:latest
      options: --privileged
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: Cache dynamically-generated datasets
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/datasets/dynamic
          key: benchmarks-SIDM-milkyWay-${{ github.run_id }}
          restore-keys: |
            benchmarks-SIDM-milkyWay
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade && apt autoremove
          apt install -y linux-tools-$(uname -r) linux-tools-generic bzip2
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Mark time for cache accesses
        run: |
          echo mark > mark.time
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay_SIDM.xml  
          perf record -g -e cycles --call-graph dwarf -F 100 -o ./testSuite/outputs/milkyWay_SIDM.perf.data ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay_SIDM.xml
          perf script -i ./testSuite/outputs/milkyWay_SIDM.perf.data > ./testSuite/outputs/milkyWay_SIDM.perf
          du -sh ./testSuite/outputs/milkyWay_SIDM.perf
          bzip2 ./testSuite/outputs/milkyWay_SIDM.perf
      - name: "Clean datasets"
        run: |
          echo Removing outdated dynamically-generated datasets
          echo Retaining:
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -anewer mark.time -print
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -not -anewer mark.time -print0 | xargs --no-run-if-empty -0 rm
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-milkyWay-SIDM
          path: './testSuite/outputs/milkyWay_SIDM.perf.bz2'
  Profile-Dark-Matter-Only-Subhalos-GProf:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/galacticusorg/buildenv:latest
      options: --privileged
    needs: Build-Executables-Instrumented-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-instrumented
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade
          apt install -y bzip2
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe ./testSuite/parameters/benchmark_darkMatterOnlySubHalos.xml  
          rm gmon.out
          ./Galacticus.exe ./testSuite/parameters/benchmark_darkMatterOnlySubHalos.xml
          gprof ./Galacticus.exe gmon.out > ./testSuite/outputs/darkMatterOnlySubhalos.gprof
          du -sh ./testSuite/outputs/darkMatterOnlySubhalos.gprof
          bzip2 ./testSuite/outputs/darkMatterOnlySubhalos.gprof
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-darkMatterOnlySubhalos-gprof
          path: './testSuite/outputs/darkMatterOnlySubhalos.gprof.bz2'
  Profile-Milky-Way-GProf:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/galacticusorg/buildenv:latest
      options: --privileged
    needs: Build-Executables-Instrumented-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: Cache dynamically-generated datasets
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/datasets/dynamic
          key: benchmarks-milkyWay-${{ github.run_id }}
          restore-keys: |
            benchmarks-milkyWay
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-instrumented
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade
          apt install -y bzip2
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs 
      - name: Mark time for cache accesses
        run: |
          echo mark > mark.time
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay.xml  
          rm gmon.out
          ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay.xml
          gprof ./Galacticus.exe gmon.out > ./testSuite/outputs/milkyWay.gprof
          du -sh ./testSuite/outputs/milkyWay.gprof
          bzip2 ./testSuite/outputs/milkyWay.gprof
      - name: "Clean datasets"
        run: |
          echo Removing outdated dynamically-generated datasets
          echo Retaining:
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -anewer mark.time -print
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -not -anewer mark.time -print0 | xargs --no-run-if-empty -0 rm
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-milkyWay-gprof
          path: './testSuite/outputs/milkyWay.gprof.bz2'
  Profile-Milky-Way-SIDM-GProf:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/galacticusorg/buildenv:latest
      options: --privileged
    needs: Build-Executables-Instrumented-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: Cache dynamically-generated datasets
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/datasets/dynamic
          key: benchmarks-SIDM-milkyWay-${{ github.run_id }}
          restore-keys: |
            benchmarks-SIDM-milkyWay
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-instrumented
      - name: Install tools
        run: |
          apt -y update && apt -y upgrade
          apt install -y bzip2
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Mark time for cache accesses
        run: |
          echo mark > mark.time
      - name: Run benchmark
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay_SIDM.xml  
          rm gmon.out
          ./Galacticus.exe ./testSuite/parameters/benchmark_milkyWay_SIDM.xml
          gprof ./Galacticus.exe gmon.out > ./testSuite/outputs/milkyWay_SIDM.gprof
          du -sh ./testSuite/outputs/milkyWay_SIDM.gprof
          bzip2 ./testSuite/outputs/milkyWay_SIDM.gprof
      - name: "Clean datasets"
        run: |
          echo Removing outdated dynamically-generated datasets
          echo Retaining:
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -anewer mark.time -print
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -not -anewer mark.time -print0 | xargs --no-run-if-empty -0 rm
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-milkyWay-SIDM-gprof
          path: './testSuite/outputs/milkyWay_SIDM.gprof.bz2'
  # Validation
  Validate-Dark-Matter-Only-Subhalos:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run validation
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./validate-darkMatterOnlySubhalos.pl
          set -o pipefail
          ./validate-darkMatterOnlySubhalos.pl 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - name: Upload validation result
        uses: actions/upload-artifact@v4
        with:
          name: validation-darkMatterOnlySubhalos
          path: |
            ./testSuite/outputs/validate_darkMatterOnlySubhalos.json
            ./testSuite/outputs/results_darkMatterOnlySubhalos.json
      - run: echo "This job's status is ${{ job.status }}."
  Validate-Milky-Way-Model:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: Cache dynamically-generated datasets
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/datasets/dynamic
          key: benchmarks-milkyWay-${{ github.run_id }}
          restore-keys: |
            benchmarks-milkyWay
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Mark time for cache accesses
        run: |
          echo mark > mark.time
      - name: Run validation
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./validate-milkyWay.pl
          set -o pipefail
          ./validate-milkyWay.pl 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - name: Upload validation result
        uses: actions/upload-artifact@v4
        with:
          name: validation-milkyWayModel
          path: |
            ./testSuite/outputs/validate_milkyWayModel.json
            ./testSuite/outputs/results_milkyWayModel.json
      - name: "Clean datasets"
        run: |
          echo Removing outdated dynamically-generated datasets
          echo Retaining:
          classVersion=`awk '{if ($1 == "class:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cambVersion=`awk '{if ($1 == "camb:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          forutilsVersion=`awk '{if ($1 == "forutils:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          fspsVersion=`awk '{if ($1 == "fsps:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          cloudyVersion=`awk '{if ($1 == "cloudy:") print $2}' ${GALACTICUS_EXEC_PATH}/aux/dependencies.yml`
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -anewer mark.time -print
          find $GALACTICUS_DATA_PATH/dynamic/ -type d \( -path $GALACTICUS_DATA_PATH/dynamic/fsps-${fspsVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/AxionCAMB -o -path $GALACTICUS_DATA_PATH/dynamic/CAMB-${cambVersion} -o -path $GALACTICUS_DATA_PATH/dynamic/RecFast -o -path $GALACTICUS_DATA_PATH/dynamic/class_public-${classVersion} \) -prune -o -type f -not -anewer mark.time -print0 | xargs --no-run-if-empty -0 rm
      - run: echo "This job's status is ${{ job.status }}."
  # Tests
  ## Linux
  ### Test Codes
  Test-Codes:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        executable: [ tests.nodes.exe,
                      tests.parameters.exe,
                      tests.files.exe,
                      tests.IO.HDF5.exe,
                      tests.IO.XML.exe,
                      tests.ODE_solver.exe,
                      tests.random.exe,
                      tests.random.quasi.exe,
                      tests.arrays.exe,
                      tests.meshes.exe,
                      tests.convex_hulls.exe,
                      tests.comparisons.exe,
                      tests.geometry.coordinate_systems.exe,
                      tests.hashes.exe,
                      tests.hashes.perfect.exe,
                      tests.regular_expressions.exe,
                      tests.hashes.cryptographic.exe,
                      tests.integration.exe,
                      tests.integration2.exe,
                      tests.differentiation.exe,
                      tests.tables.exe,
                      tests.interpolation.exe,
                      tests.interpolation.2D.exe,
                      tests.make_ranges.exe,
                      tests.mass_distributions.exe,
                      tests.math_special_functions.exe,
                      tests.math_distributions.exe,
                      tests.math.fast.exe,
                      tests.math.arithmetic.exe,
                      tests.math.linear_algebra.exe,
                      tests.root_finding.exe,
                      tests.multi_dimensional_minimizer.exe,
                      tests.search.exe,
                      tests.Roman_numerals.exe,
                      tests.SI_prefixes.exe,
                      tests.sort.exe,
                      tests.sort.topological.exe,
                      tests.string_utilities.exe,
                      tests.vectors.exe,
                      tests.multi_counters.exe,
                      tests.tensors.exe,
                      tests.cosmic_age.exe,
                      tests.spherical_collapse.open.exe,
                      tests.spherical_collapse.flat.exe,
                      tests.spherical_collapse.dark_energy.EdS.exe,
                      tests.spherical_collapse.dark_energy.open.exe,
                      tests.spherical_collapse.dark_energy.lambda.exe,
                      tests.spherical_collapse.dark_energy.constantEoSminusHalf.exe,
                      tests.spherical_collapse.dark_energy.constantEoSminusTwoThirds.exe,
                      tests.spherical_collapse.dark_energy.constantEoSminus0.6.exe,
                      tests.spherical_collapse.dark_energy.constantEoSminus0.8.exe,
                      tests.spherical_collapse.baryons_dark_matter.exe,
                      tests.spherical_collapse.nonlinear.exe,
                      tests.warm_dark_matter.exe,
                      tests.linear_growth.cosmological_constant.exe,
                      tests.linear_growth.EdS.exe,
                      tests.linear_growth.open.exe,
                      tests.linear_growth.dark_energy.exe,
                      tests.linear_growth.baryons.EdS.exe,
                      tests.halo_mass_function.Tinker.exe,
                      tests.halo_mass_function.Reed2007.exe,
                      tests.halo_mass_function.environment_averaged.exe,
                      tests.comoving_distance.exe,
                      tests.mass_accretion_history.Correa2015.exe,
                      tests.Zhao2009_algorithms.dark_energy.exe,
                      tests.Zhao2009_algorithms.EdS.exe,
                      tests.Zhao2009_algorithms.open.exe,
                      tests.NFW96_concentration.dark_energy.exe,
                      tests.Prada2011_concentration.exe,
                      tests.DiemerKravtsov2014_concentration.exe,
                      tests.concentration.Correa2015.exe,
                      tests.concentrations.exe,
                      tests.biases.exe,
                      tests.kepler_orbits.exe,
                      tests.abundances.exe,
                      tests.sigma.exe,
                      tests.power_spectrum.primordial.exe,
                      tests.power_spectrum.exe,
                      tests.transfer_functions.exe,
                      tests.black_hole_fundamentals.exe,
                      tests.bug745815.exe,
                      tests.gaunt_factors.exe,
                      tests.cooling_functions.exe,
                      tests.accretion_disks.exe,
                      tests.mass_accretion_history.Hearin2021.exe,
                      tests.mass_accretion_history.Hearin2021_stochastic.exe,
                      tests.dark_matter_profiles.exe,
                      tests.dark_matter_profiles.projected.exe,
                      tests.dark_matter_profiles.adiabaticGnedin2004.exe,
                      tests.dark_matter_profiles.heated.exe,
                      tests.dark_matter_halo_radius_enclosing_mass.exe,
                      tests.dark_matter_profiles.tidal_tracks.exe,
                      tests.dark_matter_profiles.generic.exe,
                      tests.dark_matter_profiles.finite_resolution.exe,
                      tests.dark_matter_profiles.Zhao1996.exe,
                      tests.spectra.postprocess.Inoue2014.exe,
                      tests.recombination_computed.exe,
                      tests.recombination_cooling.Hummer.exe,
                      tests.locks.exe,
                      tests.initial_mass_functions.exe,
                      tests.stellar_populations.exe,
                      tests.stellar_populations.luminosities.exe,
                      tests.excursion_sets.exe,
                      tests.merger_tree_branching.exe,
                      tests.event_hooks.exe,
                      tests.tree_branch_destroy.exe,
                      tests.binary_search_trees.exe,
                      tests.orbits.exe,
                      tests.debugging.exe,
                      tests.hashes.cryptographic.exe ]
    uses: ./.github/workflows/testCode.yml
    with:
      executable: ${{ matrix.executable }}
      artifact: test-execs
    secrets: inherit
  ### Test Crash
  Test-Crash:
    needs: Build-Executable-Linux
    uses: ./.github/workflows/testCode.yml
    with:
      executable: tests.crash.exe
      artifact: test-execs
      expectCrash: 1
    secrets: inherit
  ### Test Fail
  Test-Fail:
    needs: Build-Executable-Linux
    uses: ./.github/workflows/testCode.yml
    with:
      executable: tests.fail.exe
      artifact: test-execs
      expectFail: 1
    secrets: inherit
  ### MPI Test Codes
  Test-Codes-MPI:
    needs: Build-Executables-MPI-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        executable: [ tests.MPI.exe,
                      tests.radiative_transfer.atomic_matter.state_solver.exe ]
    uses: ./.github/workflows/testCode.yml
    with:
      executable: ${{ matrix.executable }}
      artifact: test-execs-MPI
      mpi: 1
    secrets: inherit
  ### Debugging Test Codes
  Test-Codes-Debugging:
    needs: Build-Executables-Debugging-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        executable: [ tests.debugging.exe ]
    uses: ./.github/workflows/testCode.yml
    with:
      executable: ${{ matrix.executable }}
      artifact: test-execs-debugging
    secrets: inherit
  ### Cosmology
  Test-Cosmology-01:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-cosmology.pl
          set -o pipefail
          ./test-cosmology.pl --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 1:2 2>&1 | tee test.log
          grep -v -q "BEGIN failed" test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Cosmology-02:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-cosmology.pl
          set -o pipefail
          ./test-cosmology.pl --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 2:2 2>&1 | tee test.log
          grep -v -q "BEGIN failed" test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### Mass Conservation
  Test-Mass-Conservation-Simple:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-mass-conservation-simple.pl
          set -o pipefail
          ./test-mass-conservation-simple.pl --launchMethod local --threadMaximum 1 --ompThreads 2 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Mass-Conservation-Standard:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-mass-conservation-standard.pl
          set -o pipefail
          ./test-mass-conservation-standard.pl --launchMethod local --threadMaximum 1 --ompThreads 2 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Mass-Conservation-Cold-Mode:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-mass-conservation-coldMode.pl
          set -o pipefail
          ./test-mass-conservation-coldMode.pl --launchMethod local --threadMaximum 1 --ompThreads 2  2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### Merger Trees
  Test-Merger-Tree-Builder-01:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-merger-tree-builder.pl
          set -o pipefail
          ./test-merger-tree-builder.pl --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 1:4 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Merger-Tree-Builder-02:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-merger-tree-builder.pl
          set -o pipefail
          ./test-merger-tree-builder.pl --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 2:4 2>&1 | tee test.log
          grep -v -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Merger-Tree-Builder-03:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-merger-tree-builder.pl
          set -o pipefail
          ./test-merger-tree-builder.pl --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 3:4 2>&1 | tee test.log
          grep -v -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Merger-Tree-Builder-Parallel:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-parallelTreeBuild.pl
          set -o pipefail
          ./test-parallelTreeBuild.pl 2>&1 | tee test.log
          grep -v -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Merger-Tree-Builder-04:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-merger-tree-builder.pl
          set -o pipefail
          ./test-merger-tree-builder.pl --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 4:4 2>&1 | tee test.log
          grep -v -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Merger-Tree-Write:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-merger-tree-write.pl
          set -o pipefail
          ./test-merger-tree-write.pl --launchMethod local --threadMaximum 1 --ompThreads 2 2>&1 | tee test.log
          grep -v -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ## Model Integration
  Test-Model-Integration-01:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-model-integration.pl
          set -o pipefail
          ./test-model-integration.pl --instance 1:2 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Model-Integration-02:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository analysis-perl
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/analysis-perl
          path: analysis-perl
      - name: Check out repository datasets
        uses: actions/checkout@v4
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
          echo "GALACTICUS_ANALYSIS_PERL_PATH=$GITHUB_WORKSPACE/analysis-perl" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-model-integration.pl
          set -o pipefail
          ./test-model-integration.pl --instance 2:2 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ## Misc Models
  Miscellaneous:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        file: [ test-allowed-parameters.pl,
                test-bar-instability.pl,
                test-transfer-functions-axion.pl,
                test-mass-definitions.pl,
                test-Bolshoi-tree-builder.pl,
                test-branchlessTrees.pl,
                test-branchSubsampling.pl,
                test-CGM-mass-cooled.pl,
                test-concentration-Ludlow2016.pl,
                test-tidallyTruncatedNFWFit.pl,
                test-constraint-deterministic-spins.pl,
                test-constraint-mass-function.pl,
                test-extract-directives.pl,
                test-fortran-utils.pl,
                test-halo-mass-functions.pl,
                test-inactive_luminosities.pl,
                test-interoutput-star-formation-rate.pl,
                test-mass-host-maximum.pl,
                test-noninstantaneous-recycling.pl,
                test-satellite-distance-minimum.pl,
                test-treeFilterLabels.pl,
                test-Millennium-tree-builder.pl,
                test-output.pl,
                test-output-tree-contiguousity.pl,
                test-parameter-validation.pl,
                test-perl-modules.pl,
                test-reproducibility.pl,
                test-splitForests.pl,
                test-star-formation-histories-adaptive.py,
                test-stateRestore.pl,
                test-checkpointing.pl,
                test-stellar-mass-weighted-ages.pl,
                test-tidalTracks.pl,
                test-galacticStructureStateDeallocateBug.pl,
                test-inactiveNumerics.pl,
                test-impulsiveHeating.pl,
                test-haloTriaxiality.pl ]
    uses: ./.github/workflows/testModel.yml
    with:
      file: ${{ matrix.file }}
      artifact: galacticus-exec
      runPath: ./testSuite
    secrets: inherit
  Miscellaneous-Deep:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        file: [ test-parameter-migration.pl ]
    uses: ./.github/workflows/testModel.yml
    with:
      fetchDepth: 0
      file: ${{ matrix.file }}
      artifact: galacticus-exec
      runPath: ./testSuite
    secrets: inherit
  Miscellaneous-Cached:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        file: [ test-constrained-merger-trees.pl ]
    uses: ./.github/workflows/testModel.yml
    with:
      file: ${{ matrix.file }}
      artifact: galacticus-exec
      cacheData: 1
      runPath: ./testSuite
    secrets: inherit
  Miscellaneous-Models:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        file: [ testSuite/parameters/mergerTreeEvolverThreaded.xml ]
    uses: ./.github/workflows/testModel.yml
    with:
      file: ${{ matrix.file }}
      artifact: galacticus-exec
    secrets: inherit
  ### Outputs
  Test-Outputs-01:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl --launchMethod local  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 1:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-02:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 2:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-03:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 3:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-04:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 4:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-05:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 5:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-06:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 6:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-07:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 7:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-08:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 8:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-09:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 9:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Outputs-10:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-outputs.pl
          set -o pipefail
          ./test-outputs.pl  --launchMethod local --threadMaximum 1 --ompThreads 2 --instance 10:10 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### Regressions
  Regressions:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        file: [ testSuite/regressions/bug1066052.pl,
                testSuite/regressions/adaptiveSFHLengths.py,
                testSuite/regressions/mergerTreeBoxSizeWeight.pl,
                testSuite/regressions/satellitePresetBoundMassNonZero.pl,
                testSuite/regressions/setProperties.pl,
                testSuite/regressions/cosmicEmu.pl,
                testSuite/regressions/bug1053153.xml,
                testSuite/regressions/bug711424.xml,
                testSuite/regressions/bug725315.xml,
                testSuite/regressions/coincidentMergerAndBranchJump.xml,
                testSuite/regressions/deadlockMergeTargetInDescendentOfMergee2.xml,
                testSuite/regressions/deadlockMergeTargetInDescendentOfMergee.xml,
                testSuite/regressions/finalTimeBeforeOutputTime.xml,
                testSuite/regressions/immediateSubSubMergerThenBranchJump.xml,
                testSuite/regressions/initialSatelliteNoPrimaryProgenitor.xml,
                testSuite/regressions/linearGrowthForFutureModel.xml,
                testSuite/regressions/ludlowScaleSetBeforeTreeInitialization.xml,
                testSuite/regressions/mergerAtFinalTimeInTree.xml,
                testSuite/regressions/particulate.xml,
                testSuite/regressions/subhaloMergesAtFinalTimeOfTree.xml,
                testSuite/regressions/subhaloTwoConsecutiveMergers.xml,
                testSuite/regressions/treeWithInitialSatelliteInProgenitorlessHost.xml,
                testSuite/regressions/treeWithNoPrimaryProgenitor.xml,
                testSuite/regressions/outputRank2ExtendSegFault.xml,
                testSuite/regressions/barInstabilityFPE.xml ]
    uses: ./.github/workflows/testModel.yml
    with:
      file: ${{ matrix.file }}
      artifact: galacticus-exec
    secrets: inherit
  Regressions-Cached:
    needs: Build-Executable-Linux
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        file: [ testSuite/regressions/cole2000TreeBuilderWDMNodeWellOrdering.xml,
                testSuite/regressions/issue142.xml ]
    uses: ./.github/workflows/testModel.yml
    with:
      file: ${{ matrix.file }}
      artifact: galacticus-exec
      cacheData: 1
    secrets: inherit
  ### Methods
  Test-Methods-01:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 1:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-02:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 2:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-03:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 3:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-04:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 4:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-05:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 5:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-06:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 6:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-07:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 7:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-08:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 8:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-09:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 9:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-10:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 10:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-11:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 11:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-12:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 12:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-13:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 13:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-14:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 14:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-15:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 15:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-16:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 16:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-17:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 17:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-18:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 18:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-19:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 19:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-Methods-20:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods.pl
          set -o pipefail
          ./test-methods.pl --launchMethod local --verbosity 1 --threadMaximum 1 --ompThreads 2 --instance 20:20 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### MPI Misc Models
  Test-MPI-State-Restore:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executables-MPI-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MPI
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-stateRestore_MPI.pl
          set -o pipefail
          ./test-stateRestore_MPI.pl --processesPerNode 8 --allow-run-as-root yes 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-MPI-Radiative-Transfer-Stromgren-Sphere:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executables-MPI-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MPI
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-radiativeTransfer-StromgrenSphere_MPI.pl
          set -o pipefail
          ./test-radiativeTransfer-StromgrenSphere_MPI.pl --processesPerNode 2 --allow-run-as-root yes 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-MPI-MCMC:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executables-MPI-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MPI
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          export OMP_NUM_THREADS=1
          set -o pipefail
          mpirun --allow-run-as-root -np 4 ./Galacticus.exe parameters/tutorials/mcmcConfig.xml 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### MPI Methods  
  Test-MPI-Methods-01:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executables-MPI-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MPI
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods_MPI.pl
          set -o pipefail
          ./test-methods_MPI.pl --launchMethod local --threadMaximum 1 --ompThreads 1 --instance 1:2 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  Test-MPI-Methods-02:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executables-MPI-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MPI
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-methods_MPI.pl
          set -o pipefail
          ./test-methods_MPI.pl --launchMethod local --threadMaximum 1 --ompThreads 1 --instance 2:2 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### Memory leaks (non-MPI)
  Test-Memory-Leaks:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executable-Linux-Non-Static
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-non-static
      - name: Install valgrind
        run: |
          apt -y update && apt -y upgrade
          apt -y install valgrind
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-memory-leaks.pl
          set -o pipefail
          ./test-memory-leaks.pl --mpi 0 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ### Memory leaks (MPI)
  Test-Memory-Leaks-MPI:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Executables-MPI-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository datasets
        uses: actions/checkout@v4      
        with:
          repository: galacticusorg/datasets
          path: datasets
      - run: echo "The $githubrepository repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "GALACTICUS_DATA_PATH=$GITHUB_WORKSPACE/datasets" >> $GITHUB_ENV
      - name: Download executables
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MPI
      - name: Install valgrind
        run: |
          apt -y update && apt -y upgrade
          apt -y install valgrind
      - name: Create test suite output directory
        run: mkdir -p $GALACTICUS_EXEC_PATH/testSuite/outputs
      - name: Run test
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          chmod u=wrx ./Galacticus.exe
          cd testSuite
          chmod u=wrx ./test-memory-leaks.pl
          set -o pipefail
          ./test-memory-leaks.pl --mpi 1 2>&1 | tee test.log
          ! grep -q FAIL test.log
      - run: echo "This job's status is ${{ job.status }}."
  ## Python Interface
  Test-Python-Interface:
    runs-on: ubuntu-latest
    container: ghcr.io/galacticusorg/buildenv:latest
    needs: Build-Library-Linux
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PYTHONPATH=$GITHUB_WORKSPACE/galacticus/python" >> $GITHUB_ENV
      - name: Install Python2
        run: |
          apt -y update && apt -y upgrade
          apt -y install python2.7
      - name: Download library
        uses: actions/download-artifact@v4
        with:
          name: galacticus-library
      - name: Test interface
        run: |
          tar xvfj libgalacticus.tar.bz2
          python2.7 testSuite/test-Python-interface.py
      - run: echo "This job's status is ${{ job.status }}."
  ## MacOS
  ### Test Codes
  Test-Codes-MacOS:
    needs: Build-Executable-MacOS
    strategy:
      # Ensure all jobs are run, even if some fail.
      fail-fast: false
      matrix:
        executable: [ tests.hashes.cryptographic.exe ]
    uses: ./.github/workflows/testCode.yml
    with:
      runner: macos-11
      executable: ${{ matrix.executable }}
      artifact: test-execs-MacOS
    secrets: inherit
  ### Test Python Interface
  Test-Python-Interface-MacOS:
    runs-on: macos-11
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PYTHONPATH=$GITHUB_WORKSPACE/galacticus/python" >> $GITHUB_ENV
          echo "GALACTICUS_FCFLAGS=\"$GALACTICUS_FCFLAGS -fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib\"" >> $GITHUB_ENV
          echo "FCCOMPILER=gfortran-11" >> $GITHUB_ENV
          echo "CCOMPILER=gcc-11" >> $GITHUB_ENV
          echo "CPPCOMPILER=g++-11" >> $GITHUB_ENV
          echo "PATH=$PATH:/opt/local/bin:/usr/local/bin" >> $GITHUB_ENV
          echo "PERL_MM_USE_DEFAULT=1" >> $GITHUB_ENV
      - name: Install MacPorts
        run: |
          curl -L https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg --output MacPorts-2.7.1-11-BigSur.pkg
          sudo installer -pkg ./MacPorts-2.7.1-11-BigSur.pkg -target /
          rm ./MacPorts-2.7.1-11-BigSur.pkg
      - name: Install guile
        run: sudo port install guile18
      - name: Install libmatheval
        run: |
          curl -L https://github.com/galacticusorg/libmatheval/releases/download/latest/libmatheval-1.1.12.tar.gz --output libmatheval-1.1.12.tar.gz
          tar xvfz libmatheval-1.1.12.tar.gz
          cd libmatheval-1.1.12
          # Patch following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          sed -E -i~ s/"#undef HAVE_SCM_T_BITS"/"#define HAVE_SCM_T_BITS 1"/ config.h.in
          sed -E -i~ s/"-lguile"/"-lguile18"/ configure
          sed -E -i~ s/"libguile.h"/"libguile18.h"/g configure tests/matheval.c
          # Set guile paths following the approach used in MacPorts (https://github.com/macports/macports-ports/tree/master/math/libmatheval).
          CC=gcc-11 GUILE=/opt/local/bin/guile18 GUILE_CONFIG=/opt/local/bin/guile18-config GUILE_TOOLS=/opt/local/bin/guile18-tools ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf libmatheval-1.1.12.tar.gz libmatheval-1.1.12
      - name: Install qhull
        run: |
          curl -L http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz --output qhull-2020-src-8.0.2.tgz
          tar xvfz qhull-2020-src-8.0.2.tgz
          cd qhull-2020.2
          make -j3 CC=gcc-11 CXX=g++-11
          sudo make install
          cd ..
          rm -rf qhull-2020-src-8.0.2.tgz qhull-2020.2
      - name: Install GSL
        run: |
          curl -L ftp://ftp.gnu.org/gnu/gsl/gsl-2.6.tar.gz --output gsl-2.6.tar.gz
          tar xvfz gsl-2.6.tar.gz
          cd gsl-2.6
          CC=gcc-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf gsl-2.6 gsl-2.6.tar.gz
      - name: Install HDF5
        run: |
          curl -L https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.gz --output hdf5-1.8.20.tar.gz
          tar -vxzf hdf5-1.8.20.tar.gz 
          cd hdf5-1.8.20 
          CC=gcc-11 CXX=g++-11 FC=gfortran-11 ./configure --prefix=/usr/local --enable-fortran --enable-production 
          make -j3
          sudo make install
          cd ..
          rm -rf hdf5-1.8.20 hdf5-1.8.20.tar.gz 
      - name: Install FoX
        run: |
          curl -L https://github.com/andreww/fox/archive/refs/tags/4.1.0.tar.gz --output FoX-4.1.0.tar.gz
          tar xvfz FoX-4.1.0.tar.gz
          cd fox-4.1.0
          FC=gfortran-11 ./configure --prefix=/usr/local
          make -j3
          sudo make install
          cd ..
          rm -rf fox-4.1.0 FoX-4.1.0.tar.gz
      - name: Install FFTW3
        run: |
          curl -L ftp://ftp.fftw.org/pub/fftw/fftw-3.3.4.tar.gz --output fftw-3.3.4.tar.gz
          tar xvfz fftw-3.3.4.tar.gz
          cd fftw-3.3.4
          F77=gfortran-11 CC=gcc-11 ./configure --prefix=/usr/local
          make -j4
          sudo make install
          cd ..
          rm -rf fftw-3.3.4 fftw-3.3.4.tar.gz
      - name: Install ANN
        run: |
          curl -L http://www.cs.umd.edu/~mount/ANN/Files/1.1.2/ann_1.1.2.tar.gz --output ann_1.1.2.tar.gz
          tar xvfz ann_1.1.2.tar.gz
          cd ann_1.1.2
          sed -E -i~ s/"C\+\+ = g\+\+"/"C\+\+ = g\+\+\-11"/ Make-config
          make macosx-g++
          cp bin/* /usr/local/bin/.
          cp lib/* /usr/local/lib/.
          cp -R include/* /usr/local/include/.
      - name: Install IO::Socket::SSL
        run: |
          curl -L https://cpan.metacpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.90.tar.gz --output Net-SSLeay-1.90.tar.gz
          tar xvfz Net-SSLeay-1.90.tar.gz
          cd Net-SSLeay-1.90
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/S/SU/SULLR/IO-Socket-SSL-1.966.tar.gz --output IO-Socket-SSL-1.966.tar.gz
          tar xvfz IO-Socket-SSL-1.966.tar.gz
          cd IO-Socket-SSL-1.966
          perl Makefile.PL
          make -j3
          sudo make install
          cd ..
          cd ..
          curl -L https://cpan.metacpan.org/authors/id/M/MK/MKODERER/Sys-CPU-0.52.tar.gz --output Sys-CPU-0.52.tar.gz
          tar xvfz Sys-CPU-0.52.tar.gz
          cd Sys-CPU-0.52
          perl Makefile.PL
          make -j3
          sudo make install
      - name: Install CPAN
        run: |
          sudo perl -MCPAN -e shell
          sudo perl -MCPAN -e 'install Bundle::CPAN'
      - name: Install Perl modules
        run: |
          export CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE
          sudo perl -MCPAN -e 'force("install","NestedMap")'
          sudo perl -MCPAN -e 'force("install","Scalar::Util")'
          sudo perl -MCPAN -e 'force("install","Term::ANSIColor")'
          sudo perl -MCPAN -e 'force("install","Text::Table")'
          sudo perl -MCPAN -e 'force("install","ExtUtils::ParseXS")'
          sudo perl -MCPAN -e 'install Path::Tiny'
          sudo perl -MCPAN -e 'install PkgConfig'
          sudo perl -MCPAN -e 'install Alien::Base::Wrapper'
          sudo perl -MCPAN -e 'force("install","Alien::Libxml2")'
          sudo perl -MCPAN -e 'install XML::LibXML::SAX'
          sudo perl -MCPAN -e 'force("install","XML::SAX::ParserFactory")'
          sudo perl -MCPAN -e 'force("install","XML::Validator::Schema")'
          sudo perl -MCPAN -e 'force("install","Text::Template")'
          sudo perl -MCPAN -e 'force("install","List::Uniq")'
          sudo perl -MCPAN -e 'force("install","IO::Util")'
          sudo perl -MCPAN -e 'force("install","Class::Util")'
          sudo perl -MCPAN -e 'force("install","CGI::Builder")'
          sudo perl -MCPAN -e 'force("install","Simple")'
          sudo perl -MCPAN -e 'force("install","Readonly")'
          sudo perl -MCPAN -e 'force("install","File::Slurp")'
          sudo perl -MCPAN -e 'force("install","XML::Simple")'
          sudo perl -MCPAN -e 'force("install","List::MoreUtils")'
          sudo perl -MCPAN -e 'force("install","Clone")'
          sudo perl -MCPAN -e 'force("install","IO::Scalar")'
          sudo perl -MCPAN -e 'force("install","Regexp::Common")'
          sudo perl -MCPAN -e 'install LaTeX::Encode'
          sudo perl -MCPAN -e 'install Sub::Identify'
      - name: Build Galacticus
        run: |
          export GALACTICUS_EXEC_PATH=`pwd`
          export FCCOMPILER=gfortran-11
          export CCOMPILER=gcc-11
          export CPPCOMPILER=g++-11
          export GALACTICUS_FCFLAGS="-fintrinsic-modules-path /usr/local/finclude -fintrinsic-modules-path /usr/local/include -fintrinsic-modules-path /usr/local/include/gfortran -fintrinsic-modules-path /usr/local/lib/gfortran/modules -L/usr/local/lib -L/opt/local/lib"
          export GALACTICUS_CFLAGS="-I/usr/local/include -I/opt/local/include"
          export GALACTICUS_CPPFLAGS="-I/usr/local/include -I/opt/local/include -I/usr/local/include/libqhullcpp"
          make -j3 GALACTICUS_BUILD_OPTION=lib libgalacticus.so
          mkdir galacticus
          mkdir galacticus/lib
          mkdir galacticus/python
          mv galacticus.py galacticus/python/
          mv libgalacticus.so galacticus/lib/
      - name: Test interface
        run: |
          python2 testSuite/test-Python-interface.py
      - run: echo "This job's status is ${{ job.status }}."
  # Validate, deploy and update
  Validate:
    runs-on: ubuntu-latest
    needs: [ Benchmark-Dark-Matter-Only-Subhalos, Benchmark-Milky-Way-Model, Validate-Dark-Matter-Only-Subhalos, Validate-Milky-Way-Model ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download artifacts (executable-linux)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Download artifacts (benchmark-darkMatterOnlySubhalos)
        uses: actions/download-artifact@v4
        with:
          name: benchmark-darkMatterOnlySubhalos
      - name: Download artifacts (benchmark-milkyWay)
        uses: actions/download-artifact@v4
        with:
          name: benchmark-milkyWay
      - name: Download artifacts (validation-darkMatterOnlySubhalos)
        uses: actions/download-artifact@v4
        with:
          name: validation-darkMatterOnlySubhalos
      - name: Download artifacts (validation-milkyWay)
        uses: actions/download-artifact@v4
        with:
          name: validation-milkyWayModel
      - name: Download artifacts (build-profile)
        uses: actions/download-artifact@v4
        with:
          name: build-profile
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Dark matter-only subhalos benchmarks
          tool: 'customSmallerIsBetter'
          output-file-path: benchmark_darkMatterOnlySubhalos.json
          summary-always: false
          comment-on-alert: true
          alert-comment-cc-users: '@abensonca'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          benchmark-data-dir-path: dev/bench/darkMatterOnlySubhalos
          gh-pages-branch: gh-pages
          alert-threshold: 150%
          max-items-in-chart: 256
      - name: Push benchmark result
        run: |
          git checkout gh-pages
          git push --set-upstream origin gh-pages
          git checkout -
        if: github.event_name != 'pull_request'
      - name: Revert benchmark result
        run: |
          git checkout gh-pages
          git reset --hard HEAD~1
          git checkout -
        if: github.event_name == 'pull_request'
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Milky Way model benchmarks
          tool: 'customSmallerIsBetter'
          output-file-path: benchmark_milkyWay.json
          summary-always: false
          comment-on-alert: true
          alert-comment-cc-users: '@abensonca'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          benchmark-data-dir-path: dev/bench/milkyWayModel
          gh-pages-branch: gh-pages
          alert-threshold: 150%
          max-items-in-chart: 256
      - name: Push benchmark result
        run: |
          git checkout gh-pages
          git push --set-upstream origin gh-pages
          git checkout -
        if: github.event_name != 'pull_request'
      - name: Revert benchmark result
        run: |
          git checkout gh-pages
          git reset --hard HEAD~1
          git checkout -
        if: github.event_name == 'pull_request'
      - name: Store validation result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Dark matter-only subhalos benchmarks
          tool: 'customSmallerIsBetter'
          output-file-path: validate_darkMatterOnlySubhalos.json
          summary-always: false
          comment-on-alert: true
          alert-comment-cc-users: '@abensonca'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          benchmark-data-dir-path: dev/bench/darkMatterOnlySubhalos
          gh-pages-branch: gh-pages
          alert-threshold: 110%
          max-items-in-chart: 256
      - name: Push benchmark result
        run: |
          git checkout gh-pages
          git push --set-upstream origin gh-pages
          git checkout -
        if: github.event_name != 'pull_request'
      - name: Revert benchmark result
        run: |
          git checkout gh-pages
          git reset --hard HEAD~1
          git checkout -
        if: github.event_name == 'pull_request'
      - name: Store validation result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Milky Way model benchmarks
          tool: 'customSmallerIsBetter'
          output-file-path: validate_milkyWayModel.json
          summary-always: false
          comment-on-alert: true
          alert-comment-cc-users: '@abensonca'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          benchmark-data-dir-path: dev/bench/milkyWayModel
          gh-pages-branch: gh-pages
          alert-threshold: 110%
          max-items-in-chart: 256
      - name: Push benchmark result
        run: |
          git checkout gh-pages
          git push --set-upstream origin gh-pages
          git checkout -
        if: github.event_name != 'pull_request'
      - name: Revert benchmark result
        run: |
          git checkout gh-pages
          git reset --hard HEAD~1
          git checkout -
        if: github.event_name == 'pull_request'
      - name: Push validation result
        run: |
          git checkout gh-pages
          mv results_darkMatterOnlySubhalos.json dev/valid/darkMatterOnlySubhalos/results.json
          mv results_milkyWayModel.json          dev/valid/milkyWayModel/results.json
          git config --local user.email "github@users.noreply.github.com"
          git config --local user.name "github-action-validate"
          git add dev/valid/darkMatterOnlySubhalos/results.json dev/valid/milkyWayModel/results.json
          git commit -m "Update validation results"
          git push --set-upstream origin gh-pages
          git checkout -
        if: github.event_name != 'pull_request'
      - name: Push build profile
        run: |
          git checkout gh-pages
          mkdir -p dev/bench/meta
          mv buildProfile.html dev/bench/meta/buildProfile.html
          git config --local user.email "github@users.noreply.github.com"
          git config --local user.name "github-action-validate"
          git add dev/bench/meta/buildProfile.html
          git commit -m "Update build profile"
          git push --set-upstream origin gh-pages
          git checkout -
        if: github.event_name != 'pull_request'
  Deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: [ Build-Executable-Linux,
             Build-Executables-Instrumented-Linux,
             Build-Executables-MPI-Linux,
             Build-Library-Linux,
             Build-Docker-Linux,
             Build-Documentation-Linux,
             Build-Tools,
             Build-Executable-MacOS,
             Build-Library-MacOS,
             Build-Tools-MacOS,
             Profile-Dark-Matter-Only-Subhalos,
             Profile-Milky-Way-Model,
             Profile-Milky-Way-SIDM-Model,
             Profile-Dark-Matter-Only-Subhalos-GProf,
             Profile-Milky-Way-GProf,
             Profile-Milky-Way-SIDM-GProf,
             Test-Codes,
             Test-Crash,
             Test-Fail,
             Test-Codes-MPI,
             Test-Codes-Debugging,
             Test-Memory-Leaks,
             Test-Memory-Leaks-MPI,
             Test-Cosmology-01,
             Test-Cosmology-02,
             Test-Mass-Conservation-Simple,
             Test-Mass-Conservation-Standard,
             Test-Mass-Conservation-Cold-Mode,
             Test-Merger-Tree-Builder-01,
             Test-Merger-Tree-Builder-02,
             Test-Merger-Tree-Builder-03,
             Test-Merger-Tree-Builder-04,
             Test-Merger-Tree-Builder-Parallel,
             Test-Merger-Tree-Write,
             Test-Model-Integration-01,
             Test-Model-Integration-02,
             Miscellaneous,
             Miscellaneous-Cached,
             Miscellaneous-Deep,
             Miscellaneous-Models,
             Test-Outputs-01,
             Test-Outputs-02,
             Test-Outputs-03,
             Test-Outputs-04,
             Test-Outputs-05,
             Test-Outputs-06,
             Test-Outputs-07,
             Test-Outputs-08,
             Test-Outputs-09,
             Test-Outputs-10,
             Regressions,
             Regressions-Cached,
             Test-Methods-01,
             Test-Methods-02,
             Test-Methods-03,
             Test-Methods-04,
             Test-Methods-05,
             Test-Methods-06,
             Test-Methods-07,
             Test-Methods-08,
             Test-Methods-09,
             Test-Methods-10,
             Test-Methods-11,
             Test-Methods-12,
             Test-Methods-13,
             Test-Methods-14,
             Test-Methods-15,
             Test-Methods-16,
             Test-Methods-17,
             Test-Methods-18,
             Test-Methods-19,
             Test-Methods-20,
             Test-MPI-State-Restore,
             Test-MPI-Radiative-Transfer-Stromgren-Sphere,
             Test-MPI-MCMC,
             Test-MPI-Methods-01,
             Test-MPI-Methods-02,
             Test-Python-Interface,
             Test-Codes-MacOS,
             Test-Python-Interface-MacOS,
             Validate ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download artifacts (executable-linux)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec
      - name: Download artifacts (library-linux)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-library
      - name: Download artifacts (docs)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-docs
      - name: Download artifacts (tools-linux)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-tools
      - name: Upload assets to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload bleeding-edge ./Galacticus.exe ./libgalacticus.tar.bz2 ./Galacticus_Usage.pdf ./Galacticus_Physics.pdf ./Galacticus_Development.pdf ./Galacticus_Source.pdf ./tools.tar.bz2 --clobber
          rm ./Galacticus.exe ./libgalacticus.tar.bz2 ./Galacticus_Usage.pdf ./Galacticus_Physics.pdf ./Galacticus_Development.pdf ./Galacticus_Source.pdf ./tools.tar.bz2
      - name: Download artifacts (executable-macos)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-exec-MacOS
      - name: Download artifacts (debug-macos)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-debug-MacOS
      - name: Download artifacts (library-macos)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-library-MacOS
      - name: Download artifacts (tools-macos)
        uses: actions/download-artifact@v4
        with:
          name: galacticus-tools-MacOS
      - name: Upload assets to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload bleeding-edge ./Galacticus_MacOS.exe ./libgalacticusMacOS.zip ./toolsMacOS.zip ./debugSymbolsMacOS.zip --clobber
          rm ./Galacticus_MacOS.exe ./libgalacticusMacOS.zip ./toolsMacOS.zip ./debugSymbolsMacOS.zip
      - name: Download artifacts (perf-darkMatterOnlySubhalos)
        uses: actions/download-artifact@v4
        with:
          name: perf-darkMatterOnlySubhalos
      - name: Download artifacts (perf-milkyWay)
        uses: actions/download-artifact@v4
        with:
          name: perf-milkyWay
      - name: Download artifacts (perf-milkyWay-SIDM)
        uses: actions/download-artifact@v4
        with:
          name: perf-milkyWay-SIDM
      - name: Download artifacts (perf-darkMatterOnlySubhalos-gprof)
        uses: actions/download-artifact@v4
        with:
          name: perf-darkMatterOnlySubhalos-gprof
      - name: Download artifacts (perf-milkyWay-gprof)
        uses: actions/download-artifact@v4
        with:
          name: perf-milkyWay-gprof
      - name: Download artifacts (perf-milkyWay-SIDM-gprof)
        uses: actions/download-artifact@v4
        with:
          name: perf-milkyWay-SIDM-gprof
      - name: Upload assets to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload bleeding-edge ./darkMatterOnlySubhalos.perf.bz2 ./milkyWay.perf.bz2 ./milkyWay_SIDM.perf.bz2 ./darkMatterOnlySubhalos.gprof.bz2 ./milkyWay.gprof.bz2 ./milkyWay_SIDM.gprof.bz2 --clobber
          rm ./darkMatterOnlySubhalos.perf.bz2 ./milkyWay.perf.bz2 ./milkyWay_SIDM.perf.bz2 ./darkMatterOnlySubhalos.gprof.bz2 ./milkyWay.gprof.bz2 ./milkyWay_SIDM.gprof.bz2
  Update-Release-Tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: Deploy
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Update tag
        run: |
          git tag -f bleeding-edge
          git push origin -f bleeding-edge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "This job's status is ${{ job.status }}."
