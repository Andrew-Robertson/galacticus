name: Builder-Library
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    paths:
      - 'Makefile'
      - 'source/**'
      - 'source/Bivar/**'
      - 'source/ISO_Varying_String/**'
      - 'source/gslODEInitVal2/**'
      - 'source/NSWC/**'
      - 'source/pFq/**'
      - 'source/gslSpecFuncApprox/**'
      - 'source/FFTlog/**'
      - 'perl/**'
      - 'perl/File/**'
      - 'perl/Galacticus/**'
      - 'perl/Galacticus/Launch/**'
      - 'perl/Galacticus/Constraints/**'
      - 'perl/Galacticus/Build/**'
      - 'perl/Galacticus/Build/Components/**'
      - 'perl/Galacticus/Build/Components/Classes/**'
      - 'perl/Galacticus/Build/Components/Implementations/**'
      - 'perl/Galacticus/Build/Components/Properties/**'
      - 'perl/Galacticus/Build/Components/TreeNodes/**'
      - 'perl/Galacticus/Build/Components/Hierarchy/**'
      - 'perl/Galacticus/Build/SourceTree/**'
      - 'perl/Galacticus/Build/SourceTree/Parse/**'
      - 'perl/Galacticus/Build/SourceTree/Analyze/**'
      - 'perl/Galacticus/Build/SourceTree/Process/**'
      - 'perl/Galacticus/Build/SourceTree/Process/FunctionClass/**'
      - 'perl/List/**'
      - 'perl/Sort/**'
      - 'perl/LaTeX/**'
      - 'perl/IO/**'
      - 'perl/IO/Compress/**'
      - 'perl/System/**'
      - 'perl/Fortran/**'
      - 'scripts/build/**'
      - 'schema/**'
jobs:
  Build-Executable:
    runs-on: ubuntu-latest
    container: docker://galacticusorg/buildenv:latest
    concurrency:
      group: build-library-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server."
      - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Extract branch name
        shell: bash
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: "Set environmental variables"
        run: |
          echo "GALACTICUS_EXEC_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=5120" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV
      - name: Build the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          make -j2 GALACTICUS_BUILD_OPTION=lib libgalacticus.so
      - name: Package the code
        run: |
          cd $GALACTICUS_EXEC_PATH
          git config --global --add safe.directory $GALACTICUS_EXEC_PATH
          mkdir galacticus
          mkdir galacticus/lib
          mkdir galacticus/python
          # Find all dynamic libraries needed (filtering out some system libs) and copy to our folder.
          ldd libgalacticus.so | awk '{if (NF == 4) print $3}' | grep -v -e /libc.so -e /libdl.so -e /libm.so -e /libpthread.so -e /librt.so | xargs -n 1 -i{} cp {} galacticus/lib/
          mv galacticus.py galacticus/python/
          mv libgalacticus.so galacticus/lib/
          tar cvfj libgalacticus.tar.bz2 galacticus
      - name: Update release
        if: ${{ steps.extract_branch.outputs.branch == 'master' }}
        uses: johnwbyrd/update-release@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ./libgalacticus.tar.bz2
          release: bleeding-edge
          prerelease: true
          message: Bleeding edge release
          body: This release is updated to match the [latest revision](https://github.com/galacticusorg/galacticus/commit/HEAD) to Galacticus.
      - name: Update release tag
        if: ${{ steps.extract_branch.outputs.branch == 'master' }}
        uses: richardsimko/update-tag@v1
        with:
          tag_name: bleeding-edge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "This job's status is ${{ job.status }}."
